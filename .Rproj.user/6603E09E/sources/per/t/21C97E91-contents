---
title: "WHSG presentation RSF"
author: "Christine Anderson"
date: "September 27, 2019"
output: html_document



#this and PRISM RSF have many similarities, but some code is missing from each of them



---

## Setup and Library

```{r library, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

library(MASS)
library(tidyr)
library(rgeos)
library(maptools)
library(rgdal)
library(reshape)
library(raster)
library(SDMTools)
library(velox)
library(gdalUtils)
library(plyr)
library(dplyr)
library(ggplot2)
library(corrplot)
library(scales)
library(Hmisc)
library(pastecs)
library(psych)
library(data.table)
library(FRK)
library(beepr)

`%notin%` <- Negate(`%in%`)

  mutate_cond <- function(.data, condition, ..., envir = parent.frame()) {
  condition <- eval(substitute(condition), .data, envir)
  .data[condition, ] <- .data[condition, ] %>% mutate(...)
  .data
}

  
NPLAEA <-  CRS("+init=EPSG:3573")
  
  
  
```

## Data File Paths

-The PRISM data file is called editied becasue I deleted the head with Jennie and Isabel's notes in it.



```{r data file paths}

PRISM_path <- "Data/PRISM/EIB_PRISM_Compilation_Rapid survey_edited.csv"





```

## PRISM Shorebird observations


rapid is a dataframe that contains all of the collected by rapid surveys

----Edited the csv file to make some of the column names more compatible with R
  *Total_Snow_cover_%_in_plot became Total_Snow_cover_in_plot
  *Survey_Duration (hours:minutes) became Survey_Duration
  *Probable_Nests (enter here if full broken wing display) became Probable_Nests
  *Incidentals/Off_Plot_Birds_Seen_Y/N became Incidentals_Off_Plot_Birds_Seen_Y_N
  *Changed the coordinates of two plots based on updated info from Jennie - In_Ocean_JENNIE.txt
  
  


```{r import and clean}
rapid<-read.csv(PRISM_path, stringsAsFactors = FALSE, na.strings=c("", "NA"))





#changing variable classes

rapid$Day <- as.integer(rapid$Day)
#date: character to posixct
#start: character to posixct
#end: character to posixct
#duration: character to posixct
rapid$Nests_found <- as.integer(rapid$Nests_found)
rapid$Unknown_sex <- as.integer(rapid$Unknown_sex)
rapid[,startsWith(colnames(rapid), "UTM")] <- apply((rapid[,startsWith(colnames(rapid), "UTM")]), 2, as.numeric)
rapid[,startsWith(colnames(rapid), "len")] <- apply((rapid[,startsWith(colnames(rapid), "len")]), 2, as.numeric)
rapid$Total_Plot_Area_ha <- as.numeric(rapid$Total_Plot_Area_ha) #ignore these nas for now
rapid$Total_Snow_cover_in_plot <- as.numeric(rapid$Total_Snow_cover_in_plot) #ignore these nas for now
rapid$Plot_Selection_Method <- tolower(rapid$Plot_Selection_Method)




#guessing missing UTMS - need to be checked


rapid <- rapid %>% mutate_cond(Region_name == 'Quebec', UTM_Zone = replace_na(UTM_Zone, 15))

rapid$Region_name[rapid$Region_name == "Quebec" & rapid$UTM_Zone == 15] <- "North Archipelago"

rapid <- rapid %>% mutate_cond(Region_name == 'Queen Maud Gulf', UTM_Zone = replace_na(UTM_Zone, 13))
#second guess would be 12


#the edits below only changed the southwest corner. This should work with the #part that remakes the plot coordinates using the SW corner
#rapid$UTM_SW_Northing[rapid$Plot_name_suggestion %in% c("MDW-0083A", "MDW-0083B", "PAL-0065")] <- rapid$UTM_SW_Northing[rapid$Plot_name_suggestion %in% c("MDW-0083A", "MDW-0083B", "PAL-0065")]-100000


rapid$UTM_SW_Easting[rapid$Plot_name_suggestion %in% c("BAK-0077")] <- rapid$UTM_SW_Easting[rapid$Plot_name_suggestion %in% c("BAK-0077")]* 0.1 

```






prism is a dataframe derived from rapid, containing only records of shorebirds and the columns of data I think I will use

----other things I might want include habitat proportions, goose poop counts, landform (in columns Ix,Jx,Kx), nest info when nests were found (Px)

```{r select columns}
#select the columns that I want to keep

prism <- dplyr::select(rapid, 
                       plot = Plot_name_suggestion, 
                       year = Year, 
                       month = Month, 
                       day = Day,  
                       date = Plot_Survey_Date, 
                       start = Start_time_1, 
                       end = Finish_time_1, 
                       type = Plot_type, 
                       duration = Survey_Duration, 
                       region = Region_name, 
                       sub_region = Sub_region_name, 
                       survey_method = Survey_method, 
                       quality = GIS_Habitat_quality_code,
                       prop_surveyed = Proportion_of_Plot_surveyed, 
                       Selection_Method = Plot_Selection_Method,
                       Sighting_code,
                       Original_Species_Code, 
                       species = Standardized_Species_Code,
                       Nests_found,
                       Probable_Nests,
                       Pairs,
                       Male,
                       Female,
                       Unknown_sex,
                       Incidentals_Off_Plot_Birds_Seen_Y_N,
                       UTM_Zone, 
                       UTM_SW_Easting, 
                       UTM_SW_Northing, 
                       UTM_NW_Easting, 
                       UTM_NW_Northing, 
                       UTM_NE_Easting, 
                       UTM_NE_Northing, 
                       UTM_SE_Easting, 
                       UTM_SE_Northing,
                       len_ne_nw = ne.e.minus.nw.e.CORRECT.UTMS.where.value....300, 
                       len_se_sw = se.e.minus.sw.e.CORRECT.UTMS.where.value....300,
                       len_ne_se = ne.n.minus.se.n.CORRECT.UTMS.where.value....400, 
                       len_nw_sw = nw.n.minus.sw.n.CORRECT.UTMS.where.value....400,
                       area_ha = Total_Plot_Area_ha,
                       snow_cover = Total_Snow_cover_in_plot)






#list of all observed shorebird species in prism dataset
sb.list <- c("AMGP","BASA","BBPL","BBSA","CRPL","DUNL","GRYE","HUGO","LBDO","LESA","LEYE", "PESA","PUSA","REKN","REPH","RNPH","RUTU","SAND","SEPL","SESA","SPSA","STSA","WHIM","WISN","WRSA")


prism <- prism[prism$species %in% sb.list,]




```






-removing records with missing data, different survey methods etc

```{r cleaning prism shorebird data}

prism2 <- prism




#removing NA values
prism2 <- prism2[!(is.na(prism2$Probable_Nests)),]
prism2 <- prism2[!(is.na(prism2$UTM_NE_Easting)),]
prism2 <- prism2[!(is.na(prism2$UTM_NW_Easting)),]
prism2 <- prism2[!(is.na(prism2$UTM_SW_Easting)),]
prism2 <- prism2[!(is.na(prism2$UTM_SE_Easting)),]

prism2 <- prism2[prism2$survey_method == "rapid",] #removes plots sampled using intensive, final decision??, and spagetti transects??
prism2 <- filter(prism2, type == "RAPID")



#create a total birds column

prism2 <- mutate(prism2, total_birds = (Nests_found*2) + (Probable_Nests*2) + (Pairs*2) + Male + Female + Unknown_sex)

#remove the rows where no birds were observed

prism2 <- prism2[prism2$total_birds >0,]


#guessing missing UTMS - need to be checked

#prism2 <- prism2 %>% mutate_cond(region == 'Quebec', UTM_Zone = replace_na(UTM_Zone, 15))
#prism2 <- prism2 %>% mutate_cond(region == 'Queen Maud Gulf', UTM_Zone = replace_na(UTM_Zone, 13))
  
#remove plots where proportion surveyed was less than one
#figure out how to add these back in later

prism2 <- prism2[prism2$prop_surveyed > 0.9,]

#remove plots that were not randomly selected

prism2 <- filter(prism2, Selection_Method != "field selected")

#remove incidental observations

prism2 <- filter(prism2, Sighting_code == 1)


```


```{r TROUBLESHOOTING checking columns, eval=FALSE, include=FALSE}

#check to make sure I have all of the shorebird species in my list
testsb <- unique(prism$species)
testsbY <- sb.list[sb.list %in% testsb]
testsbN <- testsb[testsb %notin% sb.list]




#check for NAs and class of each data tyoe
checking <- data.frame(vars = colnames(prism2))
#how many NAs does each column have
checking$isNA <- sapply(prism2, function(x) sum(is.na(x)))
#what is the class of each column
checking$class <- sapply(prism2, function(x) class(x))




#column specific checks
check <- prism2[is.na(prism2$sub_region),]
x <- prism2[prism2$region == "Queen Maud Gulf",]
table(prism2$type)
table(prism2$survey_method)



####check how UTM zones and regions match up. fill in missing values and check if existing values are correct

zones <- unique(prism2[,c("UTM_Zone", "region")])




```

Potential UTM zone errors

-Queen Maud Gulf has NAs
-Quebec has NAs, shouldn’t have 15s, and I’m wondering if any could be in 17 or 19
-North Hudson Barrens: why not 13?
-North Archipelago: why not 13, 16, 17, 18, 19?
	-Central Ellesmere includes 15, 16, 17





Inspecing variables

```{r interesting summary plots}
hist(prism2$year)
table(prism2$region)
table(prism2$UTM_Zone)
table(prism2$prop_surveyed)
table(prism2$Incidentals_Off_Plot_Birds_Seen_Y_N)
summary(prism2$total_birds)
hist(prism2$total_birds)
hist(prism2$Nests_found)
hist(prism2$Probable_Nests)
hist(prism2$Pairs)
hist(prism2$Male)
hist(prism2$Female)
hist(prism2$Unknown_sex)
table(prism2$species)




#tried a bunch of different ways to summarize by group and none of them worked, giving up for now
#prism3 <- prism2 %>%
#  group_by(region)

#test <- prism3 %>%
#  summarize(mean_nest = mean(Nests_found))



```




## PRISM all plots

Idenify all unique plots where shorebirds were surveyed. 

```{r defining all valid plots}

allplots <- dplyr::select(rapid, 
                       plot = Plot_name_suggestion, 
                       survey_method = Survey_method, 
                       prop_surveyed = Proportion_of_Plot_surveyed, 
                       Selection_Method = Plot_Selection_Method,
                       quality = GIS_Habitat_quality_code,
                       region = Region_name,
                       sub_region = Sub_region_name,
                       UTM_Zone, 
                       UTM_SW_Easting, 
                       UTM_SW_Northing, 
                       UTM_NW_Easting, 
                       UTM_NW_Northing, 
                       UTM_NE_Easting, 
                       UTM_NE_Northing, 
                       UTM_SE_Easting, 
                       UTM_SE_Northing)


#potential way to select unique by two vars while retaining #the rest, but can't get it working
#allplots <- data.table(allplots)
#setkey(allplots)
#test <- unique( allplots[list(plot, #species), nomatch = 0] )


#remove plots that were not surveyed with correct method or in #their entirity
allplots <- allplots[allplots$survey_method == "rapid",]
allplots <- allplots[allplots$prop_surveyed > 0.9,]
allplots <- filter(allplots, Selection_Method != "field selected")

#remove plots with no coordinates
allplots <- allplots[complete.cases(allplots),]


allplots <- select(allplots, -(c(survey_method, prop_surveyed)))

#get all unique plots
allplots <- allplots[!duplicated(allplots$plot),]



#Fix the records with incorrect UTM zone

#ones I found previously in the Yukon
allplots$UTM_Zone[(allplots$sub_region == "Yukon North Slope General" | allplots$sub_region == "Yukon North Slope Parks")] <- ifelse(allplots$UTM_SW_Easting[(allplots$sub_region == "Yukon North Slope General" | allplots$sub_region == "Yukon North Slope Parks")] < 490000, 8, 7)


#get rid of the plot in the ocean
allplots <- filter(allplots, plot != "PAL-0065")

#get rid of the plots with a non-sensical quality code

allplots <- filter(allplots, quality != 5)




```
---there are 118 plots that have two slightly different sets of coordinates



## Turn plots into spatial objects

```{r plots as spatial opjects}


#clean allplots into a configuration that can be used for df_to_SpatialPolygons function

allplots <- select(allplots, -Selection_Method)

#Don't want to gather UTM_zone with the coordiantes
allplots <- rename(allplots, zone = UTM_Zone)

#gather everything that starts with UTM into one columns, seperate the names to get the different pieces of information from the original column name, get rid of the URM column which no longer serves a purpose
allplots1 <- allplots %>% 
  gather(key = "corner", value = "coordinate", starts_with("UTM")) %>%
  separate(corner, c("UTM", "corner", "axis"), c("_")) %>%
  select(-UTM)

#spread out the eastings from the northings
allplots2 <- allplots1 %>%
  spread(axis, coordinate)





#




#corner becomes an ordered factor so that the points move around the plot in a circle. SW2 leaves a place for duplicating the SW corner becasue spatial polygons want a duplicate point to close the loop
allplots2$corner <- factor(allplots2$corner, levels = c("SW", "NW", "NE", "SE", "SW2"))


#Base the other coordinates off the southwest corner and duplicate the southwest corner

SW <- filter(allplots2, corner == "SW")
SW2 <- filter(allplots2, corner == "SW") %>%
  mutate(corner = "SW2")


SE <- SW %>%
  mutate(Easting = Easting + 300, corner = "SE") 
  
NW <- SW %>%
  mutate(Northing = Northing + 400, corner = "NW")

NE <- SE %>%
  mutate(Northing = Northing + 400, corner = "NE") 



allplots3 <- rbind(SW, NW, NE, SE, SW2)
allplots3 <- arrange(allplots3, plot, corner)
rm(SW, SW2, SE, NW, NE, allplots1, allplots2)



#



# list of all utm zones and their crs
utms <- sort(unique(allplots$zone))

utm_crs <- vector(mode = "list", length = length(utms))
epsg <- seq(from = 26907, length.out = length(utms))

for(i in 1:length(utms)){
  crstext <- paste("+init=EPSG:", epsg[i], sep = "")
  utm_crs[[i]] <- CRS(crstext)
}
names(utm_crs) <- utms





#




# split into a list where each element is the plots in one utm zone
allplots4 <- group_split(allplots3, zone)
names(allplots4) <- utms

# use above to create list of polygons by UTM zone
prism_polys <- lapply(allplots4, df_to_SpatialPolygons, keys = "plot", coords = c("Easting", "Northing"), CRS())

#give each element of the list it's appropriate CRS
for(i in 1:length(utms)){
 proj4string(prism_polys[[i]]) <- utm_crs[[i]]
}
 




#



#reproject each one


prism_polys1 <- lapply(prism_polys, spTransform, CRSobj = NPLAEA)


#combine them together


allprismpolys <-  bind(prism_polys1[[1]], prism_polys1[[2]])
for(i in 3:length(prism_polys1)){
  allprismpolys <- bind(allprismpolys, prism_polys1[[i]])
}

rm(prism_polys, prism_polys1)



#do they have any data associated?

#turn into a spatial polygon with plot ID and region


plots_id <- do.call(rbind.data.frame, allplots4) %>%
  select(plot, region, quality) %>%
  unique()

allprismpolysDF <- SpatialPolygonsDataFrame(allprismpolys, plots_id, match.ID = F)  











```


```{r testing code for above}



#this works, now turn it into a function that can be applied to a list of all the UTM zones?


#testing df_to_SpatialPolygons function

at <- allplots[4:9,]
at <- select(at, -Selection_Method)

#Don't want to gather UTM_zone with the coordiantes
at <- rename(at, zone = UTM_Zone)

#gather everything that starts with UTM into one columns, seperate the names to get the different pieces of information from the original column name, get rid of the URM column which no longer serves a purpose
at1 <- at %>% 
  gather(key = "corner", value = "coordinate", starts_with("UTM")) %>%
  separate(corner, c("UTM", "corner", "axis"), c("_")) %>%
  select(-UTM)

#spread out the eastings from the northings
at2 <- at1 %>%
  spread(axis, coordinate)

#corner becomes an ordered factor so that the points move around the plot in a circle. SW2 leaves a place for duplicating the SW corner becasue spatial polygons want a duplicate point to close the loop
at2$corner <- factor(at2$corner, levels = c("SW", "NW", "NE", "SE", "SW2"))

#duplicate the southwest corner and add back in to the rest of the plots
SW2 <- filter(at2, corner == "SW")
SW2$corner <- "SW2"

at3 <- rbind(at2, SW2)
at3 <- arrange(at3, plot, corner)


utm16N <- CRS("+init=EPSG:26916")
at_sp <- df_to_SpatialPolygons(at3, keys = "plot", c("Easting", "Northing"), utm16N)




```



```{r}
#export allplots and check it visually

writeOGR(obj=allprismpolysDF, dsn="tempdir", layer="allprismpolysDF2", driver="ESRI Shapefile")


```








## Presence-absence dataset

Add 0s fo each species when it was not found in a certain plot


```{r combining prism and allplots}




#expand by all shorebird species

plot_sb <- expand.grid(plot = allplots$plot, species = sb.list)

#add in the coordinates

plot_sb_utm <- merge(plot_sb, allplots, by = "plot")



prism3 <- select(prism2, 
                 plot, 
                 species,
                 total_birds,
                 Nests_found,
                 Probable_Nests,
                 Pairs,
                 Male,
                 Female,
                 Unknown_sex)


pa_sb <- merge(plot_sb_utm, prism3, all = TRUE)
pa_sb[is.na(pa_sb)] <- 0


#25 species x 1038 plots
#708 plots if I remove the field selected ones



```


```{r TROUBLESHOOTING merge, eval=FALSE, include=FALSE}

#some plots were duplicated by species. turns out there are rows for both on-plot and off plot observations, categorized in sighting_code. 
 <- mutate(prism2, p_s = paste(plot, species))
prismt <- mutate(prismt, dup = duplicated(p_s))
prismt <- arrange(prismt, p_s)

for(i in 1:nrow(prismt)){
  if(prismt$dup[i] == TRUE){
    prismt$dup[i-1] <- TRUE
  }
}



#check <- prism2[c(which(prism2$dup), which(prism2$dup)-1),]
#dr <- sort(c(which(prism2$dup), which(prism2$dup)-1))


check <- prismt %>%
  filter(dup == TRUE)


#there were some rows in the merged dataset that should have been there. This happened because I was using the wrong species code
test <- mutate(test, p_s = paste(plot, species))
plot_sb_utm <- mutate(plot_sb_utm, p_s = paste(plot, species))
x <- which(test$p_s%notin% plot_sb_utm$p_s)
xx <- test[x,]
  
```





## Next steps



-fix the utm zones of the yukon plots, check all other zones

-pa_sb is set up for me to do a glm on. get all the environmental data before doing this step











## Questions


-What is the column called GIS field? looks like coordinates, but different from UTM

-What is Sighting code? (NR) THIS IS WHERE I LEFT OFF CHECKING THEM

-What are spaghetti transects?

-What is type = final decision?

-why are there some plots where there are no recorded shorebirds on plot and no recorded incidentals? why does this row exist?
  -original species code was xxxx. How does database deal with plots where nothing was recorded at all?




## Suggestions

-It would be useful to have coaserser levels of biological ID - shorebird, duck, goose, mammal, seabird, songbird etc



