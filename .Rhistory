n_surveyors) %>%
mutate(plot_date = paste(Plot, Date))
View(spsy_r10X)
for(i in 1:nrow(bigdata)) {
bigdata$n_surveyors[i] <- count.not.na(c(
bigdata$Surveyor_1_Initials[i],
bigdata$Surveyor_2_Initials[i],
bigdata$Surveyor_3_Initials[i],
bigdata$Surveyor_4_Initials[i],
bigdata$Surveyor_5_Initials[i],
bigdata$Surveyor_6_Initials[i]))
}
table(bigdata$n_surveyors)
check <- bigdata %>%
filter(n_surveyors == 0)
table(check$Region_name)
check <- bigdata %>%
filter(n_surveyors == 0) %>%
filter(Region_name == "North Archipelago")
View(check)
check$Plot_type
check <- bigdata %>%
filter(n_surveyors == 0)
table(check$Plot_type)
table(bigdata$n_surveyors)
## Script for producing:
## bigdata_raw     = all data imported from csv file with no edits made to it
## bigdata         = all data, editing classes, capitalization, NAs
## prism           = filtered to include
## a dataset that contain all shorebird observations
## a dataset that contains all goose observations
## a dataset that contain all survey plots    --  would prism work for this or did I filter out anything that I would want?
## a dataset that combines all of these
# Create a version for editing / use for resetting without having to re-load from csv
bigdata <- bigdata_raw
#changing variable classes
#Nas come from:
#Day, Day, Date: 477 "not applicable" and 1 "not recorded"
#Propotion surveyed: not applicable - final decision, not applicable - nest visit, not recorded
#Sighting code: 31 "not applicable - habitat description"
#Counts: 1 "not recorded". this appears in many columns becasue it is an invensive plot that is missing a final decision form
bigdata <- bigdata %>%
mutate_at(c("Day", "Month", "Proportion_of_Plot_surveyed",
"Sighting_code", "Sub_region_code", "Count_Nests_found",
"Count_Probable_nest", "Count_Pairs", "Count_Male",
"Count_Female", "Count_Unknown_sex"), as.numeric) %>%
mutate(Date = mdy(Date))
#not done yet:
#start: character to posixct     # these contain two different formats: 00:00 and 00:00:00.
#end: character to posixct       # would need to write code to get rid of the sconds from the one that have it, then combine the date with this time to make a date-time object
#duration: character to posixct   #this is being importanted incorrectly. even in excel sheet, need to change format to h:mm for it to make sense
#adding day of year variable
bigdata$yday <- yday(bigdata$Date)
# fixing capitalizations to make all consistent within a variable
bigdata$Plot_type <- toupper(bigdata$Plot_type)
bigdata$Plot_Selection_Method <- tolower(bigdata$Plot_Selection_Method)
bigdata$Standardized_Species_Code <- toupper(bigdata$Standardized_Species_Code)
#fixing mistakes
bigdata <- bigdata %>%
mutate(Standardized_Species_Code = ifelse(Standardized_Species_Code == "AGPL", "AMGP", Standardized_Species_Code)) %>%
mutate(Standardized_Species_Code = ifelse(Standardized_Species_Code == "RAVE", "CORA", Standardized_Species_Code)) %>%
mutate(Group = ifelse(Standardized_Species_Code == "KIEI", "Waterfowl", Group)) %>%
mutate(Group = ifelse(Standardized_Species_Code == "LALO", "Passerines", Group)) %>%
mutate(Group = ifelse(Standardized_Species_Code == "GWFG", "Waterfowl", Group))
#making all no data values into NAs
bigdata <- bigdata %>%
mutate(Group = ifelse(Group == "not applicable", NA, Group)) %>%
mutate(Group = ifelse(Group == "not recorded", NA, Group))
#add a row for the plot that has no on plot observation row
add <- filter(bigdata, Standardized_Plot_Name == "KWI-1314B") %>%
filter(Standardized_Species_Code == first(Standardized_Species_Code)) %>%
mutate(Standardized_Species_Code = "XXXX") %>%
mutate(Sighting_code = 1) %>%
mutate_at(c("Count_Nests_found",
"Count_Probable_nest", "Count_Pairs", "Count_Male",
"Count_Female", "Count_Unknown_sex"), function (x) x*0) %>%
mutate(Group = NA) %>%
mutate(Sighting_code_short = "on plot") %>%
mutate(Sighting_code_desc = "Sighting of birds inside the plot boundaries.")
bigdata <- rbind(bigdata, add)
rm(add)
for(i in 1:nrow(bigdata)) {
bigdata$n_surveyors[i] <- count.not.na(c(
bigdata$Surveyor_1_Initials[i],
bigdata$Surveyor_2_Initials[i],
bigdata$Surveyor_3_Initials[i],
bigdata$Surveyor_4_Initials[i],
bigdata$Surveyor_5_Initials[i],
bigdata$Surveyor_6_Initials[i]))
}
# select only the columns containing required data
prism <- dplyr::select(bigdata,
Plot = Standardized_Plot_Name, #2855 unique plots
Survey_Lead,
Year, #1994-2019
Month, #mostly June, some July, 475 "not applicable"
Day,
Date,
yday,
Region_name, #89 plots with NAs that are outside the regions (south of Mackenzie Delta)
Region_code, #89 plots with NAs that are outside the regions (south of Mackenzie Delta)
Sub_region_name, #170 plots with NAs. 89 as above. 78 in Foxe basin becasue of differences in how subregions were calculated over time (2019 had no subregions). 3 in North Archipelago are confusing, but may stem from weird subregions that overlap near Alert (see email from Laurent RE Tyler's map of subregions)
Sub_region_code, #same as above
Plot_type,
Survey_method,
Plot_Shape,
Quality_1 = GIS_Habitat_Quality_2_Code,
Quality_2 = GIS_Habitat_Quality_1_Code, # how were these defined, when were they changed, which one is the one we should use, are these being redone?
Prop_surveyed = Proportion_of_Plot_surveyed,
Selection_method = Plot_Selection_Method, # why are there so many field selected plots?
Plot_area = Plot_area_km2,
Sighting_code,
Species = Standardized_Species_Code,  #XXXX means nothing was observed
Group,
Count_Nests_found,
Count_Probable_nest,
Count_Pairs,
Count_Male,
Count_Female,
Count_Unknown_sex,
n_surveyors)
#start = Start_time_1,
#end = Finish_time_1,
#duration = DERIVED_Survey_Duration..hours.minutes.
#remove the plots that weren't rapid plots
## decided to keep the rapid surveys of intensive plots
prism <- prism %>%
filter(Survey_method == "rapid") %>%
filter(Plot_type !="RECONNAISSANCE")
#keep only on plot observations
## 0 = final decision, 1 = on plot, 2 = incidental, 3 = mammal, 4 = wildlife sign
prism <- filter(prism, Sighting_code == 1)
#replace missing values of counts with 0s
prism <- prism %>%
mutate_at(c("Count_Nests_found",
"Count_Probable_nest", "Count_Pairs", "Count_Male",
"Count_Female", "Count_Unknown_sex"), if.na.0)
#create a total birds column
prism <- prism %>%
mutate(total_birds = (Count_Nests_found*2) + (Count_Probable_nest*2) + (Count_Pairs*2) + Count_Male + Count_Female + Count_Unknown_sex) %>%
mutate(plot_date = paste(Plot, Date))
#%>%
#  group_by(plot_date) %>%
#  add_tally(total_birds)
#60 plots missing regions name and code - should be fixed with GIS
#97 missing subregion name and code - should be fixed with GIS
#both quality columns are missing thousands - ask Isabel? GIS?
#19 are missing proportion surveyed
#361 are missing Group - they are the ones that have species = XXXX, should I replace this?
#38 have NA for plot area
#233 have plot areas bigger than 400 x 400 - what's the deal?
#create a dataset of all surveyed plots
allplots <- dplyr::select(prism,
Plot,
Survey_Lead,
Year,
Month,
Day,
Date,
yday,
Region_name,
Region_code,
Sub_region_name,
Sub_region_code,
Plot_type,
Survey_method,
Plot_Shape,
Quality_1,
Quality_2,
Prop_surveyed,
Selection_method,
Plot_area,
n_surveyors)
allplots <- distinct(allplots) #2540 unique plots, 747 were surveyed more than once
#plan of what I need to do
# seperate these datasets:
## a dataset that contain all shorebird observations
## a dataset that contains all goose observations
## a dataset that contain all survey plots
## a dataset that combines all of these
spsy_full <- prism %>%
filter(Plot %in% spsy_plots) %>%
mutate(plot_date = paste(Plot, Date)) %>%
group_by(plot_date) %>%
add_tally(total_birds)
spsy_r10 <- spsy_full %>%
filter(Region_code == 10)
View(spsy_r10)
spsy_r10 <- allplots %>%
filter(Standardized_Plot_Name %in% spsy_plots) %>%
filter(Region_code == 10)
spsy_r10 <- allplots %>%
filter(Plot %in% spsy_plots) %>%
filter(Region_code == 10)
warnings()
View(spsy_r10)
sameplot_sameyear <- allplots %>%
group_by(Plot, Year) %>%
add_tally() %>%
filter(n > 1)
spsy_r10 <- sameplot_sameyear %>%
filter(Plot %in% spsy_plots) %>%
filter(Region_code == 10)
View(spsy_r10)
?add_tally
sameplot_sameyear <- allplots %>%
group_by(Plot, Year) %>%
add_tally(name = "n_surveys") %>%
filter(n > 1)
View(sameplot_sameyear)
spsy_r10 <- sameplot_sameyear %>%
filter(Plot %in% spsy_plots) %>%
filter(Region_code == 10)
View(spsy_r10)
View(spsy_r10)
test <- bigdata %>%
filter(Standardized_Plot_Name == "ALE-3840")
cols_bigdata <- data.frame(colnames(bigdata))
View(cols_bigdata)
test <- bigdata %>%
filter(Standardized_Plot_Name == "ALE-3840") %>%
select(1:50)
warnings()
View(test)
View(test)
View(cols_bigdata)
test <- sameplot_sameyear %>%
filter(Standardized_Plot_Name == "ALE-3840")
test <- sameplot_sameyear %>%
filter(Plot == "ALE-3840")
View(test)
sum(test$Prop_surveyed)
sum(test$Prop_surveyed, rm.na=TURE)
sum(test$Prop_surveyed, rm.na=TRUE)
?sum
sum(test$Prop_surveyed, na.rm = TRUE)
##### LOAD PACKAGES
#library(MASS)
library(tidyr)
library(lubridate)
#library(rgeos)
#library(maptools)
#library(rgdal)
#library(reshape)
library(raster)
#library(SDMTools)
#library(velox)
#library(gdalUtils)
library(plyr)
library(dplyr)
library(ggplot2)
#library(corrplot)
#library(scales)
#library(Hmisc)
#library(pastecs)
#library(psych)
#library(data.table)
#library(FRK)
#library(beepr)
library(lme4)
##### GENERAL FUNCTIONS
## notin function
## works like %in%, but allows you to select the instances of the first vector that are not in the second vector
`%notin%` <- Negate(`%in%`)
#not.na returns true is the object is not an NA
not.na <- Negate(is.na)
## make hidden plyr nunique function work without having to type the beginning part
n_unique <- function (x) plyr:::nunique(x)
## conditional mutation
## works like mutate(), but only performs the operation on a subset of the dataset, returns the whole dataset
## example: prism2 <- prism2 %>% mutate_cond(region == 'Quebec', UTM_Zone = replace_na(UTM_Zone, 15))
mutate_cond <- function(.data, condition, ..., envir = parent.frame()) {
condition <- eval(substitute(condition), .data, envir)
.data[condition , ] <- .data[condition, ] %>% mutate(...,  na.rm = TRUE)
.data
}
#change the table function to include NAs by default
table <- function (..., useNA = 'ifany') base::table(..., useNA = useNA)
#function that that replaces NAs with 0s and leaves all other values as is
if.na.0 <- function(x){
ifelse(is.na(x), 0, x)
}
#function for counting the number of values that are not NAs
count.not.na <- function(vec) {
n <- length(vec)
nas <- which(is.na(vec))
x <- n-length(nas)
return(x)
}
##### OBJECTS SPECIFIC TO THIS PROJECT
## Coordinate reference system that I will do all of the analyses in
## North Pole Lambert Azimuthal Equal Area
## -----> should I chnage this to whatever Tyler used?
NPLAEA <-  CRS("+init=EPSG:3573")
#### Read in raw data
# Read in full PRISM dataset
bigdata_raw <-read.csv("data/PRISM/PRISM 1994 to 2019.csv"
, stringsAsFactors = FALSE, na.strings=c("", "NA"))
## Script for producing:
## bigdata_raw     = all data imported from csv file with no edits made to it
## bigdata         = all data, editing classes, capitalization, NAs
## prism           = filtered to include
## a dataset that contain all shorebird observations
## a dataset that contains all goose observations
## a dataset that contain all survey plots    --  would prism work for this or did I filter out anything that I would want?
## a dataset that combines all of these
# Create a version for editing / use for resetting without having to re-load from csv
bigdata <- bigdata_raw
#changing variable classes
#Nas come from:
#Day, Day, Date: 477 "not applicable" and 1 "not recorded"
#Propotion surveyed: not applicable - final decision, not applicable - nest visit, not recorded
#Sighting code: 31 "not applicable - habitat description"
#Counts: 1 "not recorded". this appears in many columns becasue it is an invensive plot that is missing a final decision form
bigdata <- bigdata %>%
mutate_at(c("Day", "Month", "Proportion_of_Plot_surveyed",
"Sighting_code", "Sub_region_code", "Count_Nests_found",
"Count_Probable_nest", "Count_Pairs", "Count_Male",
"Count_Female", "Count_Unknown_sex"), as.numeric) %>%
mutate(Date = mdy(Date))
#not done yet:
#start: character to posixct     # these contain two different formats: 00:00 and 00:00:00.
#end: character to posixct       # would need to write code to get rid of the sconds from the one that have it, then combine the date with this time to make a date-time object
#duration: character to posixct   #this is being importanted incorrectly. even in excel sheet, need to change format to h:mm for it to make sense
#adding day of year variable
bigdata$yday <- yday(bigdata$Date)
# fixing capitalizations to make all consistent within a variable
bigdata$Plot_type <- toupper(bigdata$Plot_type)
bigdata$Plot_Selection_Method <- tolower(bigdata$Plot_Selection_Method)
bigdata$Standardized_Species_Code <- toupper(bigdata$Standardized_Species_Code)
#fixing mistakes
bigdata <- bigdata %>%
mutate(Standardized_Species_Code = ifelse(Standardized_Species_Code == "AGPL", "AMGP", Standardized_Species_Code)) %>%
mutate(Standardized_Species_Code = ifelse(Standardized_Species_Code == "RAVE", "CORA", Standardized_Species_Code)) %>%
mutate(Group = ifelse(Standardized_Species_Code == "KIEI", "Waterfowl", Group)) %>%
mutate(Group = ifelse(Standardized_Species_Code == "LALO", "Passerines", Group)) %>%
mutate(Group = ifelse(Standardized_Species_Code == "GWFG", "Waterfowl", Group))
#making all no data values into NAs
bigdata <- bigdata %>%
mutate(Group = ifelse(Group == "not applicable", NA, Group)) %>%
mutate(Group = ifelse(Group == "not recorded", NA, Group))
#add a row for the plot that has no on plot observation row
add <- filter(bigdata, Standardized_Plot_Name == "KWI-1314B") %>%
filter(Standardized_Species_Code == first(Standardized_Species_Code)) %>%
mutate(Standardized_Species_Code = "XXXX") %>%
mutate(Sighting_code = 1) %>%
mutate_at(c("Count_Nests_found",
"Count_Probable_nest", "Count_Pairs", "Count_Male",
"Count_Female", "Count_Unknown_sex"), function (x) x*0) %>%
mutate(Group = NA) %>%
mutate(Sighting_code_short = "on plot") %>%
mutate(Sighting_code_desc = "Sighting of birds inside the plot boundaries.")
bigdata <- rbind(bigdata, add)
rm(add)
for(i in 1:nrow(bigdata)) {
bigdata$n_surveyors[i] <- count.not.na(c(
bigdata$Surveyor_1_Initials[i],
bigdata$Surveyor_2_Initials[i],
bigdata$Surveyor_3_Initials[i],
bigdata$Surveyor_4_Initials[i],
bigdata$Surveyor_5_Initials[i],
bigdata$Surveyor_6_Initials[i]))
}
# select only the columns containing required data
prism <- dplyr::select(bigdata,
Plot = Standardized_Plot_Name, #2855 unique plots
Survey_Lead,
Year, #1994-2019
Month, #mostly June, some July, 475 "not applicable"
Day,
Date,
yday,
Region_name, #89 plots with NAs that are outside the regions (south of Mackenzie Delta)
Region_code, #89 plots with NAs that are outside the regions (south of Mackenzie Delta)
Sub_region_name, #170 plots with NAs. 89 as above. 78 in Foxe basin becasue of differences in how subregions were calculated over time (2019 had no subregions). 3 in North Archipelago are confusing, but may stem from weird subregions that overlap near Alert (see email from Laurent RE Tyler's map of subregions)
Sub_region_code, #same as above
Plot_type,
Survey_method,
Plot_Shape,
Quality_1 = GIS_Habitat_Quality_2_Code,
Quality_2 = GIS_Habitat_Quality_1_Code, # how were these defined, when were they changed, which one is the one we should use, are these being redone?
Prop_surveyed = Proportion_of_Plot_surveyed,
Selection_method = Plot_Selection_Method, # why are there so many field selected plots?
Plot_area = Plot_area_km2,
Sighting_code,
Species = Standardized_Species_Code,  #XXXX means nothing was observed
Group,
Count_Nests_found,
Count_Probable_nest,
Count_Pairs,
Count_Male,
Count_Female,
Count_Unknown_sex,
n_surveyors)
#start = Start_time_1,
#end = Finish_time_1,
#duration = DERIVED_Survey_Duration..hours.minutes.
#remove the plots that weren't rapid plots
## decided to keep the rapid surveys of intensive plots
prism <- prism %>%
filter(Survey_method == "rapid") %>%
filter(Plot_type !="RECONNAISSANCE")
#keep only on plot observations
## 0 = final decision, 1 = on plot, 2 = incidental, 3 = mammal, 4 = wildlife sign
prism <- filter(prism, Sighting_code == 1)
#replace missing values of counts with 0s
prism <- prism %>%
mutate_at(c("Count_Nests_found",
"Count_Probable_nest", "Count_Pairs", "Count_Male",
"Count_Female", "Count_Unknown_sex"), if.na.0)
#create a total birds column
prism <- prism %>%
mutate(total_birds = (Count_Nests_found*2) + (Count_Probable_nest*2) + (Count_Pairs*2) + Count_Male + Count_Female + Count_Unknown_sex) %>%
mutate(plot_date = paste(Plot, Date))
#%>%
#  group_by(plot_date) %>%
#  add_tally(total_birds)
#60 plots missing regions name and code - should be fixed with GIS
#97 missing subregion name and code - should be fixed with GIS
#both quality columns are missing thousands - ask Isabel? GIS?
#19 are missing proportion surveyed
#361 are missing Group - they are the ones that have species = XXXX, should I replace this?
#38 have NA for plot area
#233 have plot areas bigger than 400 x 400 - what's the deal?
#create a dataset of all surveyed plots
allplots <- dplyr::select(prism,
Plot,
Survey_Lead,
Year,
Month,
Day,
Date,
yday,
Region_name,
Region_code,
Sub_region_name,
Sub_region_code,
Plot_type,
Survey_method,
Plot_Shape,
Quality_1,
Quality_2,
Prop_surveyed,
Selection_method,
Plot_area,
n_surveyors)
allplots <- distinct(allplots) #2540 unique plots, 747 were surveyed more than once
#plan of what I need to do
# seperate these datasets:
## a dataset that contain all shorebird observations
## a dataset that contains all goose observations
## a dataset that contain all survey plots
## a dataset that combines all of these
table(prism$n_surveyors)
View(prism)
View(allplots)
table(allplots$n_surveyors)
field<- allplots %>%
filter(Selection_method == "field selected")
field_industry <- allplots %>%
filter(Selection_method == "field selected") %>%
filter(Survey_Lead == "Industry")
table(field_industry$Plot_type)
field_intensive <- allplots %>%
filter(Selection_method == "field selected") %>%
filter(Plot_type == "INTENSIVE")
table(field_intensive$Survey_Lead)
View(prism)
?gather
table(prism$Selection_method)
prism %>%
mutate(comparison = Selection_method,
comparison = ifelse(Selection_method == "field selected" & Survey_Lead == "Industry", "field selected - industry", comparison))
prism2 <- prism %>%
mutate(comparison = Selection_method,
comparison = ifelse(Selection_method == "field selected" & Survey_Lead == "Industry", "field selected - industry", comparison))
table(prism2$comparison)
prism2 <- prism %>%
mutate(comparison = Selection_method,
comparison = ifelse(Selection_method == "field selected" & Survey_Lead == "Industry", "field selected - industry", comparison),
comparison = ifelse(Selection_method == "field selected" & Plot_type == "INTENSIVE", "field selected - intensive", comparison),
comparison = ifelse(comparison == "field selected", "field selected - other", comparison))
table(prism2$comparison)
prism <- prism %>%
mutate(comparison = Selection_method,
comparison = ifelse(Selection_method == "field selected" & Survey_Lead == "Industry", "field selected - industry", comparison),
comparison = ifelse(Selection_method == "field selected" & Plot_type == "INTENSIVE", "field selected - intensive", comparison),
comparison = ifelse(comparison == "field selected", "field selected - other", comparison))
allplots <- dplyr::select(prism,
Plot,
Survey_Lead,
Year,
Month,
Day,
Date,
yday,
Region_name,
Region_code,
Sub_region_name,
Sub_region_code,
Plot_type,
Survey_method,
Plot_Shape,
Quality_1,
Quality_2,
Prop_surveyed,
Selection_method,
Plot_area,
n_surveyors,
comparison)
allplots <- distinct(allplots)
table(allplots$comparison)
