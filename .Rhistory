# select only the columns containing required data
prism <- select(bigdata,
Plot = Standardized_Plot_Name, #2855 unique plots
Survey_Lead,
Year, #1994-2019
Month, #mostly June, some July, 475 "not applicable"
Day,
Date,
yday,
Start_time_1,
Region_name, #89 plots with NAs that are outside the regions (south of Mackenzie Delta)
Region_code, #89 plots with NAs that are outside the regions (south of Mackenzie Delta)
Sub_region_name, #170 plots with NAs. 89 as above. 78 in Foxe basin becasue of differences in how subregions were calculated over time (2019 had no subregions). 3 in North Archipelago are confusing, but may stem from weird subregions that overlap near Alert (see email from Laurent RE Tyler's map of subregions)
Sub_region_code, #same as above
Plot_type,
Survey_method,
Plot_Shape,
Quality_1 = GIS_Habitat_Quality_2_Code,
Quality_2 = GIS_Habitat_Quality_1_Code, # how were these defined, when were they changed, which one is the one we should use, are these being redone?
Prop_surveyed = Proportion_of_Plot_surveyed,
Selection_method = Plot_Selection_Method, # why are there so many field selected plots?
Plot_area = Plot_area_km2,
Sighting_code,
Species = Standardized_Species_Code,  #XXXX means nothing was observed
Group,
Count_Nests_found,
Count_Probable_nest,
Count_Pairs,
Count_Male,
Count_Female,
Count_Unknown_sex,
#n_surveyors,
Human_development_details,
Map_datum,
Plot_center_long = Plot_Center_X_coordinate..long.easting.,
Plot_center_lat = Plot_Centre_Y_coordinate..lat.northing.,
contains("UTM")) %>%
select(-contains("Wildlife"))
allplots <- prism %>%
select(Plot,
Plot_type,
Survey_Lead,
Selection_method,
Region_code,
Map_datum,
Plot_center_long,
Plot_center_lat,
contains("UTM")) %>%
distinct()
## add in the missing data from rasmussen 2019
plots_ras_2019_raw <- read.csv("data/PRISM/Rasmussen_PlotCoordinates_2019s.csv")
plots_ras_2019 <- plots_ras_2019_raw %>%
select(-Lat, -Long, -UTM_Zone) %>%
rename(Plot = Plot_Name) %>%
unite(coords, UTM_E, UTM_N) %>%
spread(Corner, coords) %>%
separate(SW, c("UTM_1_Easting", "UTM_1_Northing")) %>%
separate(NW, c("UTM_2_Easting", "UTM_2_Northing")) %>%
separate(NE, c("UTM_3_Easting", "UTM_3_Northing")) %>%
separate(SE, c("UTM_4_Easting", "UTM_4_Northing")) %>%
mutate(UTM_1_Type = "SW", UTM_2_Type = "NW", UTM_3_Type = "NE", UTM_4_Type = "SE",
UTM_1_Status = "field", UTM_5_Type = NA, UTM_5_Easting = NA, UTM_5_Northing = NA)
ras_cols <- colnames(plots_ras_2019)[colnames(plots_ras_2019) %notin% c("Plot", "UTM_Zone")]
allplots_ras_2019 <- allplots %>%
filter(Plot %in% plots_ras_2019$Plot) %>%
select(-one_of(ras_cols))
allplots_sub <- allplots %>%
filter(Plot %notin% plots_ras_2019$Plot)
allplots_ras_2019 <- merge(allplots_ras_2019, plots_ras_2019, by = "Plot")
allplots <- rbind(allplots_sub, allplots_ras_2019)
rm(allplots_ras_2019, allplots_sub, plots_ras_2019)
#make a versions that I will subtract entries from to prevent duplicates
allplots2 <- allplots %>%
mutate(PlotX = paste(Plot, 1:length(Plot), sep = "_"), dup = allDuplicated(Plot))
### divide into groups that I want to check
##################### Which coordinates to use?
#group 0: plots that have no coordinates anywhere
g0_no_coords <- allplots2 %>%
filter(Plot %notin% GIS_shapefiles$Plot) %>%
filter(is.na(UTM_1_Easting)) %>%
mutate(UTM_1_Easting = Plot_center_long, UTM_1_Northing = Plot_center_lat,
UTM_1_Status = ifelse(is.na(UTM_1_Easting), NA, "LAT_LONG_DM")) %>%
filter(is.na(UTM_1_Easting))
allplots2 <- allplots2 %>%
filter(PlotX %notin% g0_no_coords$PlotX)
#group 1: field modified plots - verify
g1_field_modified <- allplots2 %>%
filter(Selection_method == "field modified gis selected") %>%
filter(not.na(UTM_1_Easting)) %>%
filter(not.na(UTM_4_Easting)) %>%
filter(Plot %in% GIS_shapefiles$Plot) %>%
arrange(Region_code)
allplots2 <- allplots2 %>%
filter(PlotX %notin% g1_field_modified$PlotX)
table(g1_field_modified$UTM_1_Status)
############### Plots that we could use the GIS files but we don't appear to have them
#Group 2: no GIS plots that I've uploaded so far
g2_no_gis <- allplots2 %>%
filter(Plot %notin% GIS_shapefiles$Plot)
allplots2 <- allplots2 %>%
filter(PlotX %notin% g2_no_gis$PlotX)
################# Separate out plots with LAT/LONG instead of UTM
g2_no_gis <- g2_no_gis %>%
mutate(UTM_1_Easting = ifelse(is.na(UTM_1_Easting), Plot_center_lat, UTM_1_Easting),
UTM_1_Northing = ifelse(is.na(UTM_1_Northing), Plot_center_long, UTM_1_Northing),
UTM_1_Status = ifelse(is.na(UTM_1_Status), "LAT_LONG_DM", UTM_1_Status))
g2a_needs_transformation <- g2_no_gis %>%
filter(UTM_1_Status %in% c("LAT_LONG_DD", "LAT_LONG_DM"))
g2_no_gis <- g2_no_gis %>%
filter(UTM_1_Status %notin% c("LAT_LONG_DD", "LAT_LONG_DM"))
############# Seperate out plots with only one coordinate
g2b_point <- g2_no_gis %>%
filter(is.na(UTM_4_Easting))
g2_no_gis <- g2_no_gis %>%
filter(not.na(UTM_4_Easting))
###relating back to g2
table(g2_no_gis$Plot_type, g2_no_gis$Survey_Lead)
#there are 2 duplicates: SHI-3261 (CWS Rapid and) PAL-0079 (Industry Rapid)
table(g2_no_gis$Plot_type[is.na(g2_no_gis$UTM_1_Easting)], g2_no_gis$Survey_Lead[is.na(g2_no_gis$UTM_1_Easting)])
table(g2_no_gis$UTM_1_Status)
#143 plots were "GIS confirmed" but I don't have these in the GIS files. Look for them?
test <- g2_no_gis %>%
filter(Plot_type == "RAPID") %>%
filter(Survey_Lead == "Canadian Wildlife Service")
table(test$Selection_method, is.na(test$UTM_1_Easting))
############### Plots that we can use the GIS files
g3_yes_gis <- allplots2 %>%
arrange(Region_code)
nrow(g0_no_coords)+ nrow(g1_field_modified) + nrow(g2_no_gis) + nrow(g2a_needs_transformation) + nrow(g2b_point) + nrow(g3_yes_gis) == nrow(allplots)
check <- allplots[,1:15]
check <- prism[,1:15]
View(check)
check <- prism[,1:15] %>%
distinct()
View(check)
###test if the plots locations are the same or different from each other
######################################################################
#G1
plot_coords <- g1_field_modified %>%
select(-Plot_center_long, -Plot_center_lat, -GIS_UTM_2_zone, -GIS_UTM_3_zone, -GIS_UTM_4_zone,
-contains("Type"), -contains("Order"), -contains("Status"), -Comment_UTM) %>%
mutate(Map_datum = ifelse(Map_datum == "not recorded", "NAD 1983 Transverse Mercator", Map_datum)) %>%
rename(UTM_Zone = GIS_UTM_1_zone)
#### seperate by map datum
plot_coords27 <- plot_coords %>%
filter(Map_datum == "NAD 1927")
plot_coords83 <- plot_coords %>%
filter(Map_datum == "NAD 1983 Transverse Mercator")
###########################################################################################################################
###########################################################################################################################
##Conversion process for NAD 1927 Plots
# create a list of all utm zones in the dataset and their relevent crs
utms27 <- sort(unique(plot_coords27$UTM_Zone))
utm_crs27 <- vector(mode = "list", length = length(utms27))
epsg27 <- utms27 + 26700
for(i in 1:length(utms27)){
crstext <- paste("+init=EPSG:", epsg27[i], sep = "")
utm_crs27[[i]] <- CRS(crstext)
}
names(utm_crs27) <- utms27
##################################
#Make plot_coords long instead of wide
cols <- plot_coords27 %>%
select(contains("UTM"), -UTM_Zone) %>%
colnames()
test <- plot_coords27
corners <- character()
for(i in 1:44){
c1 <- paste("UTM_", i, "_Easting", sep = "")
c2 <- paste("UTM_", i, "_Northing", sep = "")
name <- paste("corner", i, sep = "")
test <- unite(test, !!name, c(!!c1, !!c2))
corners <- c(corners, name)
}
plot_coords27 <- test %>%
gather("corner", "coords", one_of(corners)) %>%
filter(coords != "NA_NA") %>%
separate(coords, c("Easting", "Northing"), sep = "_") %>%
mutate(Easting = as.numeric(Easting), Northing = as.numeric(Northing))
##################################
# split into a list where each element is the plots in one utm zone
plots_by_utm27 <- group_split(plot_coords27, UTM_Zone)
names(plots_by_utm27) <- utms27
# use above to create list of polygons by UTM zone
prism_polys_utm27 <- lapply(plots_by_utm27, df_to_stPolygons,  "Easting", "Northing", "PlotX")
#give each element of the list it's appropriate CRS
for(i in 1:length(utms27)){
st_crs(prism_polys_utm27[[i]]) <- st_crs(utm_crs27[[i]])
}
#####################################
#reproject each one
#### change this projection to whatever tyler's are in
prism_polys_proj_list27 <- lapply(prism_polys_utm27, st_transform, crs = NAD83)
#combine them together
prism_polys_proj27 <-  rbind(prism_polys_proj_list27[[1]], prism_polys_proj_list27[[2]])
for(i in 3:length(prism_polys_proj_list27)){
prism_polys_proj27 <- rbind(prism_polys_proj27, prism_polys_proj_list27[[i]])
}
prism_polys_proj27 <- prism_polys_proj27 %>%
separate(PlotX, c("Plot", "X"), sep = "_", remove = FALSE) %>%
select(-X)
###########################################################################################################################
###########################################################################################################################
##Conversion process for NAD 1983 Plots
######################################
# create a list of all utm zones in the dataset and their relevent crs
utms83 <- sort(unique(plot_coords83$UTM_Zone))
utm_crs83 <- vector(mode = "list", length = length(utms83))
epsg83 <- utms83 + 26900
for(i in 1:length(utms83)){
crstext <- paste("+init=EPSG:", epsg83[i], sep = "")
utm_crs83[[i]] <- CRS(crstext)
}
names(utm_crs83) <- utms83
##################################
#Make plot_coords long instead of wide
cols <- plot_coords83 %>%
select(contains("UTM"), -UTM_Zone) %>%
colnames()
test <- plot_coords83
corners <- character()
for(i in 1:44){
c1 <- paste("UTM_", i, "_Easting", sep = "")
c2 <- paste("UTM_", i, "_Northing", sep = "")
name <- paste("corner", i, sep = "")
test <- unite(test, !!name, c(!!c1, !!c2))
corners <- c(corners, name)
}
plot_coords83 <- test %>%
gather("corner", "coords", one_of(corners)) %>%
filter(coords != "NA_NA") %>%
separate(coords, c("Easting", "Northing"), sep = "_") %>%
mutate(Easting = as.numeric(Easting), Northing = as.numeric(Northing))
##################################
# split into a list where each element is the plots in one utm zone
plots_by_utm83 <- group_split(plot_coords83, UTM_Zone)
names(plots_by_utm83) <- utms83
# use above to create list of polygons by UTM zone
prism_polys_utm83 <- lapply(plots_by_utm83, df_to_stPolygons,  "Easting", "Northing", "PlotX")
#give each element of the list it's appropriate CRS
for(i in 1:length(utms83)){
st_crs(prism_polys_utm83[[i]]) <- st_crs(utm_crs83[[i]])
}
#####################################
#reproject each one
#### change this projection to whatever tyler's are in
prism_polys_proj_list83 <- lapply(prism_polys_utm83, st_transform, crs = NAD83)
#combine them together
prism_polys_proj83 <-  rbind(prism_polys_proj_list83[[1]], prism_polys_proj_list83[[2]])
for(i in 3:length(prism_polys_proj_list83)){
prism_polys_proj83 <- rbind(prism_polys_proj83, prism_polys_proj_list83[[i]])
}
prism_polys_proj83 <- prism_polys_proj83 %>%
separate(PlotX, c("Plot", "X"), sep = "_", remove = FALSE) %>%
select(-X)
###########################################################################################################################
###########################################################################################################################
##Merge 1927 and 1983 plots together
good_g1 <- rbind(prism_polys_proj27, prism_polys_proj83) %>%
select(-PlotX) %>%
arrange(Plot)
#GROUP 2
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
#G2
plot_coords <- g2_no_gis %>%
select(-Plot_center_long, -Plot_center_lat, -GIS_UTM_2_zone, -GIS_UTM_3_zone, -GIS_UTM_4_zone,
-contains("Type"), -contains("Order"), -contains("Status"), -Comment_UTM) %>%
mutate(Map_datum = ifelse(Map_datum == "not recorded", "NAD 1983 Transverse Mercator", Map_datum)) %>%
rename(UTM_Zone = GIS_UTM_1_zone)
#### seperate by map datum
plot_coords27 <- plot_coords %>%
filter(Map_datum == "NAD 1927")
plot_coords83 <- plot_coords %>%
filter(Map_datum == "NAD 1983 Transverse Mercator")
###########################################################################################################################
##Conversion process for NAD 1927 Plots
# create a list of all utm zones in the dataset and their relevent crs
utms27 <- sort(unique(plot_coords27$UTM_Zone))
utm_crs27 <- vector(mode = "list", length = length(utms27))
epsg27 <- utms27 + 26700
for(i in 1:length(utms27)){
crstext <- paste("+init=EPSG:", epsg27[i], sep = "")
utm_crs27[[i]] <- CRS(crstext)
}
names(utm_crs27) <- utms27
##################################
#Make plot_coords long instead of wide
cols <- plot_coords27 %>%
select(contains("UTM"), -UTM_Zone) %>%
colnames()
test <- plot_coords27
corners <- character()
for(i in 1:44){
c1 <- paste("UTM_", i, "_Easting", sep = "")
c2 <- paste("UTM_", i, "_Northing", sep = "")
name <- paste("corner", i, sep = "")
test <- unite(test, !!name, c(!!c1, !!c2))
corners <- c(corners, name)
}
plot_coords27 <- test %>%
gather("corner", "coords", one_of(corners)) %>%
filter(coords != "NA_NA") %>%
separate(coords, c("Easting", "Northing"), sep = "_") %>%
mutate(Easting = as.numeric(Easting), Northing = as.numeric(Northing))
##################################
# split into a list where each element is the plots in one utm zone
plots_by_utm27 <- group_split(plot_coords27, UTM_Zone)
names(plots_by_utm27) <- utms27
# use above to create list of polygons by UTM zone
prism_polys_utm27 <- lapply(plots_by_utm27, df_to_stPolygons,  "Easting", "Northing", "PlotX")
#give each element of the list it's appropriate CRS
for(i in 1:length(utms27)){
st_crs(prism_polys_utm27[[i]]) <- st_crs(utm_crs27[[i]])
}
#####################################
#reproject each one
#### change this projection to whatever tyler's are in
prism_polys_proj_list27 <- lapply(prism_polys_utm27, st_transform, crs = NAD83)
#combine them together
prism_polys_proj27 <-  rbind(prism_polys_proj_list27[[1]], prism_polys_proj_list27[[2]])
for(i in 3:length(prism_polys_proj_list27)){
prism_polys_proj27 <- rbind(prism_polys_proj27, prism_polys_proj_list27[[i]])
}
prism_polys_proj27 <- prism_polys_proj27 %>%
separate(PlotX, c("Plot", "X"), sep = "_", remove = FALSE) %>%
select(-X)
###########################################################################################################################
###########################################################################################################################
##Conversion process for NAD 1983 Plots
######################################
# create a list of all utm zones in the dataset and their relevent crs
utms83 <- sort(unique(plot_coords83$UTM_Zone))
utm_crs83 <- vector(mode = "list", length = length(utms83))
epsg83 <- utms83 + 26900
for(i in 1:length(utms83)){
crstext <- paste("+init=EPSG:", epsg83[i], sep = "")
utm_crs83[[i]] <- CRS(crstext)
}
names(utm_crs83) <- utms83
##################################
#Make plot_coords long instead of wide
cols <- plot_coords83 %>%
select(contains("UTM"), -UTM_Zone) %>%
colnames()
test <- plot_coords83
corners <- character()
for(i in 1:44){
c1 <- paste("UTM_", i, "_Easting", sep = "")
c2 <- paste("UTM_", i, "_Northing", sep = "")
name <- paste("corner", i, sep = "")
test <- unite(test, !!name, c(!!c1, !!c2))
corners <- c(corners, name)
}
plot_coords83 <- test %>%
gather("corner", "coords", one_of(corners)) %>%
filter(coords != "NA_NA") %>%
separate(coords, c("Easting", "Northing"), sep = "_") %>%
mutate(Easting = as.numeric(Easting), Northing = as.numeric(Northing))
##################################
# split into a list where each element is the plots in one utm zone
plots_by_utm83 <- group_split(plot_coords83, UTM_Zone)
names(plots_by_utm83) <- utms83
# use above to create list of polygons by UTM zone
prism_polys_utm83 <- lapply(plots_by_utm83, df_to_stPolygons,  "Easting", "Northing", "PlotX")
#give each element of the list it's appropriate CRS
for(i in 1:length(utms83)){
st_crs(prism_polys_utm83[[i]]) <- st_crs(utm_crs83[[i]])
}
#####################################
#reproject each one
#### change this projection to whatever tyler's are in
prism_polys_proj_list83 <- lapply(prism_polys_utm83, st_transform, crs = NAD83)
#combine them together
prism_polys_proj83 <-  rbind(prism_polys_proj_list83[[1]], prism_polys_proj_list83[[2]])
for(i in 3:length(prism_polys_proj_list83)){
prism_polys_proj83 <- rbind(prism_polys_proj83, prism_polys_proj_list83[[i]])
}
prism_polys_proj83 <- prism_polys_proj83 %>%
separate(PlotX, c("Plot", "X"), sep = "_", remove = FALSE) %>%
select(-X)
#re-project
prism_polys_proj83 <- st_transform(prism_polys_proj83, NAD83)
###########################################################################################################################
###########################################################################################################################
##Merge 1927 and 1983 plots together
good_g2 <- rbind(prism_polys_proj27, prism_polys_proj83) %>%
select(-PlotX)
#good_g2 <- merge(prism_polys_proj, plot_coords[,1:5]) %>%
#  arrange(Plot)
#st_write(prism_polys_proj, "exported/g2_test.shp")
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
#g2a
#long format
plot_coords <- g2a_needs_transformation %>%
rename(UTM_Zone = GIS_UTM_1_zone) %>%
select(-Plot_center_long, -Plot_center_lat, -GIS_UTM_2_zone, -GIS_UTM_3_zone, -GIS_UTM_4_zone,
-contains("Type"), -contains("Order"), -contains("Status"), -Comment_UTM)
cols <- plot_coords %>%
select(contains("UTM"), -UTM_Zone) %>%
colnames()
test <- plot_coords
corners <- character()
for(i in 1:44){
c1 <- paste("UTM_", i, "_Easting", sep = "")
c2 <- paste("UTM_", i, "_Northing", sep = "")
name <- paste("corner", i, sep = "")
test <- unite(test, !!name, c(!!c1, !!c2))
corners <- c(corners, name)
}
plot_coords <- test %>%
gather("corner", "coords", one_of(corners)) %>%
filter(coords != "NA_NA") %>%
separate(coords, c("Easting", "Northing"), sep = "_")
#convert degrees minutes to decimal degrees
plot_coords <- data.frame(Plot = plot_coords$Plot,
Lat = conv_unit(plot_coords$Northing, from = 'deg_dec_min', to = 'dec_deg'),
Long = conv_unit(plot_coords$Easting, from = 'deg_dec_min', to = 'dec_deg')) %>%
mutate(Lat = as.numeric(as.character(Lat)), Long = as.numeric(as.character(Long))*-1)
###convert to a point object
good_g2a <- st_as_sf(plot_coords, coords = c("Long", "Lat"))
st_crs(good_g2a) <- NAD83
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
#g2b
plot_coords <- g2b_point %>%
rename(UTM_Zone = GIS_UTM_1_zone) %>%
select(-Plot_center_long, -Plot_center_lat, -GIS_UTM_2_zone, -GIS_UTM_3_zone, -GIS_UTM_4_zone,
-contains("Type"), -contains("Order"), -contains("Status"), -Comment_UTM) %>%
mutate(Map_datum = ifelse(Map_datum == "not recorded", "NAD 1983 Transverse Mercator", Map_datum))
# create a list of all utm zones in the dataset and their relevent crs
utms <- sort(unique(plot_coords$UTM_Zone))
utm_crs <- vector(mode = "list", length = length(utms))
epsg <- utms + 26900
for(i in 1:length(utms)){
crstext <- paste("+init=EPSG:", epsg[i], sep = "")
utm_crs[[i]] <- CRS(crstext)
}
names(utm_crs) <- utms
##################################
#Make plot_coords long instead of wide
cols <- plot_coords %>%
select(contains("UTM"), -UTM_Zone) %>%
colnames()
test <- plot_coords
corners <- character()
for(i in 1:44){
c1 <- paste("UTM_", i, "_Easting", sep = "")
c2 <- paste("UTM_", i, "_Northing", sep = "")
name <- paste("corner", i, sep = "")
test <- unite(test, !!name, c(!!c1, !!c2))
corners <- c(corners, name)
}
plot_coords <- test %>%
gather("corner", "coords", one_of(corners)) %>%
filter(coords != "NA_NA") %>%
separate(coords, c("Easting", "Northing"), sep = "_")
##################################
# split into a list where each element is the plots in one utm zone
plots_by_utm <- group_split(plot_coords, UTM_Zone)
names(plots_by_utm) <- utms
prism_points_utm <- lapply(plots_by_utm, st_as_sf, coords = c("Easting", "Northing"))
#give each element of the list it's appropriate CRS
for(i in 1:length(utms)){
st_crs(prism_points_utm[[i]]) <- st_crs(utm_crs[[i]])
}
#####################################
#reproject each one
#### change this projection to whatever tyler's are in
prism_points_proj_list <- lapply(prism_points_utm, st_transform, crs = NAD83)
#combine them together
prism_points_proj <-  rbind(prism_points_proj_list[[1]], prism_points_proj_list[[2]])
for(i in 3:length(prism_points_proj_list)){
prism_points_proj <- rbind(prism_points_proj, prism_points_proj_list[[i]])
}
prism_points_proj <- prism_points_proj %>%
separate(PlotX, c("Plot", "X"), sep = "_", remove = FALSE) %>%
select(-X)
#good version
good_g2b <- prism_points_proj %>%
select(Plot, geometry)
#### collating the best GIS coordinates for each plot
#GROUP 3
good_g3_gis <- GIS_shapefiles %>%
filter(Plot %in% g3_yes_gis$Plot) %>%
distinct(Plot) %>%
mutate(dup = allDuplicated(Plot)) %>%
filter(dup == FALSE) %>%
select(-dup)
good_g3a_alert_dups <- shapefile_proj_list[[34]] %>%
st_as_sf() %>%
select(Plot = FN, Historic_Plot = LABEL) %>%
filter(Plot %in% g3_yes_gis$Plot) %>%
distinct(Plot, Historic_Plot) %>%
mutate(dup = allDuplicated(Plot)) %>%
filter(dup == TRUE)  %>%
select(-dup)
all_polygons <- rbind(good_g1, good_g2, good_g3_gis)
all_polygons$Historic_Plot <- NA
all_polygons <- rbind(all_polygons, good_g3a_alert_dups)
good_g0 <- st_sf(Plot = g0_no_coords$Plot,
geometry = st_sfc(st_point()),
crs = NAD83)
all_points <- rbind(good_g0, good_g2a, good_g2b)
2080+305
2575+305
st_write(all_polygons, "exported/all_polygons_NAD83.shp")
st_write(all_points, "exported/all_points_NAD83.shp")
