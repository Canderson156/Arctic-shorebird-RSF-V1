install.packages("roxygen2")
library(roxygen2)
?roxygenise
#library(MASS)
library(tidyr)
#library(rgeos)
#library(maptools)
#library(rgdal)
#library(reshape)
library(raster)
#library(SDMTools)
#library(velox)
#library(gdalUtils)
library(plyr)
library(dplyr)
library(ggplot2)
#library(corrplot)
#library(scales)
#library(Hmisc)
#library(pastecs)
#library(psych)
#library(data.table)
#library(FRK)
#library(beepr)
#load packages
#library(MASS)
library(tidyr)
#library(rgeos)
#library(maptools)
#library(rgdal)
#library(reshape)
library(raster)
#library(SDMTools)
#library(velox)
#library(gdalUtils)
library(plyr)
library(dplyr)
library(ggplot2)
#library(corrplot)
#library(scales)
#library(Hmisc)
#library(pastecs)
#library(psych)
#library(data.table)
#library(FRK)
#library(beepr)
## notin function
## works like %in%, but allows you to select the instances of the first vector that are not in the second vector
`%notin%` <- Negate(`%in%`)
## conditional mutation
## works like mutate(), but only performs the operation on a subset of the dataset, returns the whole dataset
mutate_cond <- function(.data, condition, ..., envir = parent.frame()) {
condition <- eval(substitute(condition), .data, envir)
.data[condition, ] <- .data[condition, ] %>% mutate(...)
.data
}
## Coordinate reference system that I will do all of the analyses in
## North Pole Lambert Azimuthal Equal Area
NPLAEA <-  CRS("+init=EPSG:3573")
bigdata<-read.csv("EIB_PRISM_Compilation_Rapid survey_CWS&Industry_to_2018_20191110_to Paul Smith.csv", header = T)
full_rapid<-read.csv("data/PRISM/EIB_PRISM_Compilation_Rapid survey_edited.csv"
, stringsAsFactors = FALSE, na.strings=c("", "NA"))
full_rapid<-read.csv("data/PRISM/EDITED_19NOV2019_PRISM__Rapid _to_2018.csv"
, stringsAsFactors = FALSE, na.strings=c("", "NA"))
rm(full_rapid)
rapid<-read.csv("data/PRISM/EDITED_19NOV2019_PRISM__Rapid _to_2018.csv"
, stringsAsFactors = FALSE, na.strings=c("", "NA"))
rapid$Day <- as.integer(rapid$Day)
rapid<-read.csv("data/PRISM/EDITED_19NOV2019_PRISM__Rapid _to_2018.csv"
, stringsAsFactors = FALSE, na.strings=c("", "NA"))
table(rapid$Day)
test <- filter(rapid, Day == "not applicable")
View(test)
colnames(rapid)
cols_rapid <- data.frame(colnames(rapid))
View(cols_rapid)
test <- rapid %>%
filter(Day == "not applicable")
?select
test <- rapid %>%
filter(Day == "not applicable") %>%
select(1:70)
View(test)
`%notin%` <- Negate(`%in%`)
#load packages
#library(MASS)
library(tidyr)
#library(rgeos)
#library(maptools)
#library(rgdal)
#library(reshape)
library(raster)
#library(SDMTools)
#library(velox)
#library(gdalUtils)
library(plyr)
library(dplyr)
library(ggplot2)
#library(corrplot)
#library(scales)
#library(Hmisc)
#library(pastecs)
#library(psych)
#library(data.table)
#library(FRK)
#library(beepr)
## notin function
## works like %in%, but allows you to select the instances of the first vector that are not in the second vector
`%notin%` <- Negate(`%in%`)
## conditional mutation
## works like mutate(), but only performs the operation on a subset of the dataset, returns the whole dataset
mutate_cond <- function(.data, condition, ..., envir = parent.frame()) {
condition <- eval(substitute(condition), .data, envir)
.data[condition, ] <- .data[condition, ] %>% mutate(...)
.data
}
## Coordinate reference system that I will do all of the analyses in
## North Pole Lambert Azimuthal Equal Area
NPLAEA <-  CRS("+init=EPSG:3573")
View(cols_rapid)
View(test)
View(cols_rapid)
View(cols_rapid)
View(cols_rapid)
View(cols_rapid)
cols <- c(17, 36, 41:42, 45, 331:338, 344, 677:714)
test <- rapid %>%
filter(Day == "not applicable") %>%
select(cols)
View(test)
rapid$Day <- as.integer(rapid$Day)
table(rapid$Day)
table(rapid$Day, useNA = "always")
str(rapid)
t <- str(rapid)
str(rapid, list.len=ncol(df))
table(rapid$Distance_to_Coast_GIS, useNA = "always")
View(cols_rapid)
table(rapid$Plot_Shape , useNA = "always")
584+1256+274+25
2139/24454
#load packages
#library(MASS)
library(tidyr)
#library(rgeos)
#library(maptools)
#library(rgdal)
#library(reshape)
library(raster)
#library(SDMTools)
#library(velox)
#library(gdalUtils)
library(plyr)
library(dplyr)
library(ggplot2)
#library(corrplot)
#library(scales)
#library(Hmisc)
#library(pastecs)
#library(psych)
#library(data.table)
#library(FRK)
#library(beepr)
## notin function
## works like %in%, but allows you to select the instances of the first vector that are not in the second vector
`%notin%` <- Negate(`%in%`)
## conditional mutation
## works like mutate(), but only performs the operation on a subset of the dataset, returns the whole dataset
mutate_cond <- function(.data, condition, ..., envir = parent.frame()) {
condition <- eval(substitute(condition), .data, envir)
.data[condition, ] <- .data[condition, ] %>% mutate(...)
.data
}
## Coordinate reference system that I will do all of the analyses in
## North Pole Lambert Azimuthal Equal Area
NPLAEA <-  CRS("+init=EPSG:3573")
# Read in full PRISM dataset
bigdata <-read.csv("data/PRISM/EDITED_19NOV2019_PRISM__Rapid _to_2018.csv"
, stringsAsFactors = FALSE, na.strings=c("", "NA"))
cols_bigdata <- data.frame(colnames(bigdata))
prism <- dplyr::select(bigdata,
plot = Standardized_Plot_Name,
year = Year,
month = Month,
day = Day,
date = Date,
start = Start_time_1,
end = Finish_time_1,
type = Plot_type,
duration = DERIVED_Survey_Duration..hours.minutes.,
region = Region_name,
region_code = Region_code,
subregion = Sub_region_name,
subregion_code = Sub_region_code,
zone = Zone_name,
cluster = Standardized_Cluster_Code,
cluster_size = Cluster_Size_km2,
survey_method = Survey_method,
Tylercomment = Plot_Comment_1_attribute_Plot_name.1,
quality = GIS_Habitat_Quality_2_Code,
quality_old = GIS_Habitat_Quality_1_Code,
prop_surveyed = Proportion_of_Plot_surveyed,
Selection_Method = Plot_Selection_Method,
Sighting_code,
species = Standardized_Species_Code,
group = Group,
final_nests = FINAL_Nests_found,
final_centroids = FINAL_Number_of_Centroids,
final_decision_comment = FINAL_decision_comment,
Count_Nests_found,
Count_Probable_nest,
Count_Pairs,
Count_Male,
Count_Female,
Count_Unknown_sex,
Incidentals.Off_Plot_Birds_Seen_Y.N,
GIS_UTM_ZONE = GIS_UTM_2_zone,
UTM_SW_Easting = UTM_1_Easting,
UTM_SW_Northing = UTM_1_Northing,
UTM_NW_Easting = UTM_2_Easting,
UTM_NW_Northing = UTM_2_Northing,
UTM_NE_Easting = UTM_3_Easting,
UTM_NE_Northing = UTM_3_Northing,
UTM_SE_Easting = UTM_4_Easting,
UTM_SE_Northing = UTM_4_Northing,
plot_area = Plot_area_km2,
snow_cover = Total_Snow_cover_._in_plot)
View(cols_bigdata)
head(bigdata$Start_time_1.1)
table(bigdata$Start_time_1.1)
table(bigdata$Start_time_1)
str(table(bigdata$Start_time_1))
table(bigdata$Start_time_1) == table(bigdata$Start_time_1.1)
View(cols_bigdata)
cols <- c(17, 36, 41:42, 45, 331:338, 344, 677:714)
test <- bigdata %>%
filter(Day == "not applicable") %>%
select(cols)
View(test)
View(cols_bigdata)
cols <- c(17, 36, 41:42, 45, 331:338, 344, 677:714, 77:302)
test <- bigdata %>%
filter(Day == "not applicable") %>%
select(cols)
View(test)
table(test$UTM_44_Easting, useNA = "always")
table(bigdata$UTM_44_Easting, useNA = "always")
test <- bigdata %>%
filter(!is.na(UTM_44_Easting)) %>%
select(cols)
View(test)
test <- bigdata %>%
#filter(!is.na(UTM_44_Easting)) %>%
select(cols)
test <- bigdata %>%
filter(!is.na(UTM_44_Easting))
test$Plot_Shape
test <- bigdata %>%
filter(!is.na(UTM_44_Easting)) %>%
select(cols)
View(test)
table(bigdata$UTM_1_Type)
table(bigdata$UTM_1_Type, useNA = "always")
table(bigdata$UTM_2_Type, useNA = "always")
table(bigdata$UTM_3_Type, useNA = "always")
table(bigdata$UTM_.2_Type, useNA = "always")
table(bigdata$UTM_.1_Type, useNA = "always")
table(bigdata$UTM_3_Type, useNA = "always")
table(bigdata$UTM_4_Type, useNA = "always")
table(bigdata$UTM_5_Type, useNA = "always")
table(bigdata$UTM_10_Type, useNA = "always")
table(bigdata$UTM_20_Type, useNA = "always")
table(bigdata$UTM_30_Type, useNA = "always")
View(cols_bigdata)
table(bigdata$comment_ut'')
table(bigdata$Comment_UTM)
table(bigdata$GIS_UTM_1_zone, useNA = "always")
table(bigdata$GIS_UTM_2_zone, useNA = "always")
table(bigdata$GIS_UTM_3_zone, useNA = "always")
table(bigdata$GIS_UTM_4_zone, useNA = "always")
View(test)
View(cols_bigdata)
cols <- c(17, 36, 41:42, 45, 331:338, 344, 677:714, 77, 84, 90, 97, 77:302)
test <- bigdata %>%
filter(!is.na(UTM_44_Easting)) %>%
select(cols)
View(test)
test <- bigdata %>%
#filter(!is.na(UTM_44_Easting)) %>%
select(cols)
View(test)
cols <- c(77, 84, 90, 97)
test <- bigdata %>%
#filter(!is.na(UTM_44_Easting)) %>%
select(cols)
View(test)
?identical
identical(1,1,1)
identical(1,1,2)
identical(1,2,2)
test[1]
test[1,]
str(test[1,])
vector(test[1,])
as.numeric(test[1,])
as.numeric(test[1,])
15 %in% as.numeric(test[1,])
15 %in% c(15, 15, 15, 16)
15 == c(15, 15, 15, 16)
all(15 == c(15, 15, 15, 16))
all(15 == c(15, 15, 15, NA))
View(test)
View(cols_bigdata)
all.identical <- function(vec){
all(vec[1] == vec)
}
x <- c(3,3,3,3,3)
all.identical(x)
x <- c(3,3,3,3,4)
all.identical(x)
x <- c(3,3,3,3,NA)
all.identical(x)
?apply
y <- apply(test, 1, all.identical)
table(y)
test$same <- apply(test, 1, all.identical)
View(test)
table(test$same, useNA = "always")
prism <- dplyr::select(bigdata,
plot = Standardized_Plot_Name,
year = Year,
month = Month,
day = Day,
date = Date,
start = Start_time_1,
end = Finish_time_1,
type = Plot_type,
duration = DERIVED_Survey_Duration..hours.minutes.,
region = Region_name,
region_code = Region_code,
subregion = Sub_region_name,
subregion_code = Sub_region_code,
zone = Zone_name,
cluster = Standardized_Cluster_Code,
cluster_size = Cluster_Size_km2,
survey_method = Survey_method,
Tylercomment = Plot_Comment_1_attribute_Plot_name.1,
quality = GIS_Habitat_Quality_2_Code,
quality_old = GIS_Habitat_Quality_1_Code,
prop_surveyed = Proportion_of_Plot_surveyed,
Selection_Method = Plot_Selection_Method,
Sighting_code,
species = Standardized_Species_Code,
group = Group,
final_nests = FINAL_Nests_found,
final_centroids = FINAL_Number_of_Centroids,
final_decision_comment = FINAL_decision_comment,
Count_Nests_found,
Count_Probable_nest,
Count_Pairs,
Count_Male,
Count_Female,
Count_Unknown_sex,
Incidentals.Off_Plot_Birds_Seen_Y.N,
GIS_UTM_ZONE = GIS_UTM_2_zone,
UTM_1_Easting = UTM_1_Easting,
UTM_1_Northing = UTM_1_Northing,
UTM_1_Order = UTM_1_Order,
UTM_1_Status = UTM_1_Status,
UTM_1_Type = UTM_1_Type,
plot_area = Plot_area_km2,
snow_cover = Total_Snow_cover_._in_plot)
h <- head(prism)
View(h)
table(prism$Tylercomment)
View(h)
table(prism$quality, useNA = "always")
table(prism$quality_old, useNA = "always")
table(prism$final_centroids)
table(prism$final_centroids, useNA = "always")
